{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Bold;}
{\colortbl;\red255\green255\blue255;\red71\green71\blue71;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c34902\c34902\c34902;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww22040\viewh11280\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <string>\
#include <stack>\
string reverseString(string word)\
\{\
	stack<char> reversed;\
	for(int k = 0; k<word.size(); k++)\{\
		reversed.push(word[k]);	\
	\}\
	string reverse;\
	for(int k=0; k<word.size(); k++)\{\
		reverse+=reversed.top();\
		reversed.pop();\
	\}\
	return reverse;\
\}\
\
//implement a stack with a queue\
bool Stack::empty() const\
\{\
	return q.empty();\
\}\
int Stack::size() const\
\{\
	return q.size();\
\}\
int Stack::top()\
\{\
	queue<int> temp;\
	//pop everything until you get to the end\
	while(q.size()!=1)\{\
		temp.push(q.top());\
		q.pop();\
	\}\
	int tempi = q.top();\
	temp.push(q.top());\
	q = temp;\
	return tempi;\
\}\
void Stack::pop()\
\{\
	int n = q.size() - 1;\
	for(int k = 0; k < n; k++)\{\
		q.push(q.front());\
		q.pop();\
	\}\
	q.pop(); //pop the item at the very end\
\}\
\
//Pascal Conversion\
int pascals(int row, int col) //4, 2\
\{\
	if(col > row ||col<0)\
		return 0;\
	if(row==0 || row==1)\
		return 1;\
	return pascals(row-1, col-1)+pascals(row-1, col);\
\}\
\
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 longestCommonSubsequence("
\f1\b \ul ma
\f0\b0 \ulnone rs","
\f1\b \ul m
\f0\b0 \ulnone eg
\f1\b \ul a
\f0\b0 \ulnone n") \'c2\'a0// Returns "ma"\cf3 \strokec3 \
\pard\pardeftab720\sl480\partightenfactor0
\cf2 \strokec2 longestCommonSubsequence("
\f1\b \ul c
\f0\b0 \ulnone hri
\f1\b \ul s
\f0\b0 \ulnone ", "
\f1\b \ul cs
\f0\b0 \ulnone 32") // Returns "cs"\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ***\
string longestcommonSubsequence(string s1, string s2)\
\{\
	if(s1==\'93\'94 || s2==\'93\'94)\
		return \'93\'94;\
	if(s1[0]==s2[0])\
		return s1[0]+longestcommonSubsequence(s1.substring(1), s2.substring(1));\
	string s1 = longestcommonSubsequence(s1, s2.substring(1));\
	string s2 = longestcommonSubsequence(s1.substring(1), s2);\
	if(s1.size()>s2.size())\
		return s1;\
	else\
		return s2;	\
\}\
\
//Recursive merge LL\
Node* merge(Node* l1, Node* l2)\
\{\
	Node* head;\
	if(l1==nullptr || l2==nullptr)\
		return nullptr;\
	if(l1->value > l2->value)\
		head = l1;\
		head->next = merge(l1->next, l2);\
	else\{\
		head = l2\
		head->next = merge(l1, l2->next);\
	\}\
	return head;\
\}\
}